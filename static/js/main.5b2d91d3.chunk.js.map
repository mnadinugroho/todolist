{"version":3,"sources":["components/FormInput.jsx","components/List.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","background","border","color","height","padding","whiteSpace","margin","label","width","TodoCreator","theme","todo","setTodo","clearInput","inputRef","isInputEmpty","preventSubmit","classes","className","ThemeProvider","FormControl","TextField","id","value","variant","onChange","e","target","onFocus","ref","aria-describedby","onKeyPress","FormHelperText","Button","type","alt","backgroundColor","li","borderBottom","TodoList","todos","completeTodo","editTodo","deleteTodo","saveTodo","noteRef","React","useState","checked","setChecked","UniqKey","handleToggle","inx","currentIndex","indexOf","newChecked","push","splice","List","map","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","onClick","isEditing","htmlFor","text","defaultValue","element","current","IconButton","aria-label","ListItemText","primary","style","textDecoration","isCompleted","ListItemSecondaryAction","createMuiTheme","palette","main","Form","newTodo","setNewTodo","setTodos","useRef","setInputEmpty","key","preventDefault","addTodo","newTodos","console","log","useEffect","onSubmit","focus","newArr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b2d91d3.chunk.js","sourcesContent":["import  React from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport TextField from \"@material-ui/core/TextField\";\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles({\n    root: {\n        background: 'linear-gradient(45deg, gray 30%, black 90%)',\n        border: 0,\n        color: 'white',\n        height: 30,\n        padding: '0 10px',\n        whiteSpace: 'nowrap',\n        margin: '15px 0 0 20px',\n    },\n    label: {\n        width: '80%'\n    }\n});\n\n\nconst TodoCreator = ({ theme, todo, setTodo, clearInput, inputRef, isInputEmpty, preventSubmit }) => {\n    const classes = useStyles();\n\n    return (\n        <div className=\"form__input\">\n            <ThemeProvider theme={theme}>\n                <FormControl   className={classes.label}>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"Apa list yang akan diselesaikan ?\" // better accessibility with Material UI\n                        value={todo}\n                        variant=\"outlined\"\n                        onChange={(e) => setTodo(e.target.value)}\n                        onFocus={clearInput}\n                        ref={inputRef}\n                        aria-describedby=\"component-error-text\"\n                        onKeyPress={preventSubmit}\n                    />\n\n                    { !isInputEmpty ?\n                        <></>\n                        :\n                        <>\n                            <FormHelperText id=\"component-error-text\">Task tidak boleh kosong</FormHelperText>\n                        </>\n                    }\n                </FormControl>\n                <Button\n                    type=\"submit\"\n                    alt=\"add-note\"\n                    className={classes.root}\n                    onKeyPress={preventSubmit}\n                >\n                    Tambahkan List\n                </Button>\n            </ThemeProvider>\n        </div>\n    )\n\n}\n\nexport  default TodoCreator;","import React from 'react';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n        backgroundColor: '#f5f5f5',\n        padding: 0\n    },\n    li: {\n        borderBottom: '1px dashed black'\n    }\n}));\n\nconst TodoList = ({ theme, todos, completeTodo, editTodo, deleteTodo, saveTodo, noteRef, preventSubmit }) => {\n    const classes = useStyles();\n    const [checked, setChecked] = React.useState([0]);\n    let UniqKey = 123;\n\n\n    const handleToggle = (value, inx) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n        completeTodo(inx);\n    };\n\n\n    return (\n        <ThemeProvider theme={theme}>\n            <List className={classes.root}>\n            {todos.map((todo, inx) => {\n                const labelId = `list-todo-${todo}`;\n\n                return (\n                    <ListItem\n                        key={`todo-${UniqKey++}`}\n                        role={undefined}\n                        dense\n                        button\n                        className={classes.li}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                color=\"primary\"\n                                edge=\"start\"\n                                checked={checked.indexOf(todo) !== -1}\n                                tabIndex={-1}\n                                disableRipple\n                                inputProps={{ 'aria-labelledby': labelId }}\n                                onClick={handleToggle(todo, inx)}\n                                onKeyPress={preventSubmit}\n                            />\n                        </ListItemIcon>\n                        {\n                            (!todo.isEditing) ?\n                                <>\n                                    <ListItemText\n                                        id={labelId}\n                                        primary={`${todo.text}`}\n                                        style={{textDecoration: todo.isCompleted ? \"line-through\" : \"\"}}\n                                    />\n                                    <ListItemIcon>\n                                        <IconButton\n                                            edge=\"end\"\n                                            aria-label=\"edit\"\n                                            onClick={() => editTodo(inx)}\n                                        >\n                                            <EditIcon/>\n                                        </IconButton>\n                                    </ListItemIcon>\n                                </>\n                                :\n                                <>\n                                    <label\n                                        htmlFor=\"task\" // better accessibility with HTML\n                                        className=\"visuallyhidden\"\n                                    >\n                                        {todo.text}\n                                    </label>\n                                    <input\n                                        className=\"form__edit-input\"\n                                        defaultValue={todo.text}\n                                        ref={(element) => noteRef.current[inx] = element}\n                                        onKeyPress={preventSubmit}\n                                        id=\"task\"\n                                    />\n                                    <ListItemIcon>\n                                        <IconButton onClick={() => saveTodo(inx)} edge=\"end\" aria-label=\"delete\">\n                                            <BookmarkIcon />\n                                        </IconButton>\n                                    </ListItemIcon>\n                                </>\n                        }\n                        <ListItemSecondaryAction>\n                            <IconButton onClick={() => deleteTodo(inx)} edge=\"end\" aria-label=\"delete\">\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n        </ThemeProvider>\n    );\n}\n\nexport default TodoList;\n","import  React, { useState, useEffect, useRef } from 'react';\nimport TodoCreator from \"./FormInput\";\nimport TodoList from \"./List\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: { main: '#000000' },\n    },\n});\n\nconst Form = () => {\n\n    const [ newTodo, setNewTodo ] = useState('');\n    const [ todos, setTodos ] = useState([\n        {\n            text: \"Memberi Makan Kucing\",\n            isCompleted: false,\n            isEditing: false\n        },\n        {\n            text: \"Futsal bersama teman\",\n            isCompleted: false,\n            isEditing: false\n        },\n        {\n            text: \"Mengerjakan PR\",\n            isCompleted: false,\n            isEditing: false\n        }\n    ]);\n    const inputRef = useRef();\n    const noteRef = useRef({});\n    const [ isInputEmpty, setInputEmpty ] = useState(false)\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        addTodo(newTodo);\n        clearInput();\n        inputRef.current.focus();\n    };\n\n    const preventSubmit = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n        }\n    };\n\n    const addTodo = text => {\n        if ( text !== '') {\n            const newTodos = [...todos, { text }]\n            setNewTodo('')\n            setTodos(newTodos);\n        } else {\n            console.log('text', text)\n            setInputEmpty(true);\n        }\n    };\n\n    const removeTodo = inx => {\n        const newArr = [...todos]\n        newArr.splice(inx, 1)\n        setTodos(newArr)\n    }\n\n    const completeTodo = inx => {\n        const newTodos = [...todos];\n        newTodos[inx].isCompleted = !newTodos[inx].isCompleted;\n        setTodos(newTodos);\n    };\n\n    const editTodo = inx => {\n        const newTodos = [...todos];\n        newTodos[inx].isEditing = !newTodos[inx].isEditing;\n        setTodos(newTodos);\n    }\n\n    const saveTodo = (inx) => {\n        const newTodos = [...todos];\n        newTodos[inx].isEditing = !newTodos[inx].isEditing;\n        newTodos[inx].text = noteRef.current[inx].value;\n        setTodos(newTodos);\n    }\n\n    const clearInput = () => {\n        setNewTodo('');\n    }\n\n    const setTodo = todo => {\n        setInputEmpty(false);\n        setNewTodo(todo);\n    }\n\n    useEffect(() => {\n\n    }, [todos])\n\n    return (\n        <form onSubmit={handleSubmit} className=\"form\">\n\n                <TodoCreator\n                    theme={theme}\n                    todo={newTodo}\n                    setTodo={setTodo}\n                    clearInput={clearInput}\n                    inputRef={inputRef}\n                    isInputEmpty={isInputEmpty}\n                    preventSubmit={preventSubmit}\n                />\n\n                <TodoList\n                    theme={theme}\n                    todos={todos}\n                    completeTodo={completeTodo}\n                    editTodo={editTodo}\n                    deleteTodo={removeTodo}\n                    saveTodo={saveTodo}\n                    noteRef={noteRef}\n                    preventSubmit={preventSubmit}\n                />\n            </form>\n    )\n}\n\nexport default Form;","import './App.css';\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>Todo List</h1>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}